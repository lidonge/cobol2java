{{%statementType=obj_getVar("statementType");CALL = statementType == "CALL" ? "CALL" : null;""}}
{{%curObj=obj_getCurObj();""}}
{{#$CALL}}{{#$curObj}}
    {{%givingName = null;""}}
    {{#givingPhrase}}
        {{#givingCall}}
            {{>call}}
            {{%givingName = operand;""}}
        {{/givingCall}}
    {{/givingPhrase}}
    {{#onOverflowPhrase}}
        {{%onOverflowPhrase="onOverflowPhrase";""}}
        //TODO onOverflowPhrase
    {{/onOverflowPhrase}}
    {{#programValueStmt.literal}}
        {{>literal}}
        {{%calleeClass = name_toClass(str_replace(operand,"\"",""));""}}
    {{/programValueStmt.literal}}
    {{#programValueStmt.call}}
        {{%operand = obj_getVar("delegate.delegate.name");""}}
    {{/programValueStmt.call}}
    {{#onExceptionClause}}
        try{
    {{/onExceptionClause}}
    {{%
        //var_push(operand);
        //println("convert call sub : " + operand);
        calleeClass = cobol_compile(operand);
        //operand = var_pop();
        //println("end convert call sub : " + operand);
    ""}}
    {{#$givingName}}
        {{%givingName}} =
    {{/givingName}}
        new {{%calleeClass}}().procedure(
    {{%parameters = null;""}}
    {{#usingPhrase.usingParameters}}
        {{>callSub.parameter}}
    {{/usingPhrase.usingParameters}}
    {{%parameters == null ? "":parameters}});
    {{#notOnExceptionClause}}
        {{>statements}}
    {{/notOnExceptionClause}}
    {{#onExceptionClause}}
        }catch(Exception e){
            {{>statements}}
        }
    {{/onExceptionClause}}
{{/curObj}}{{/CALL}}