{{%statementType=obj_getVar("statementType");CALL = statementType == "CALL" ? "CALL" : null;""}}
{{%curObj=obj_getCurObj();""}}
{{#$CALL}}{{#$curObj}}
    {{%givingName = null;dynCall = null;""}}
    {{#givingPhrase}}
        {{#givingCall}}
            {{>call}}
            {{%givingName = operand;""}}
        {{/givingCall}}
    {{/givingPhrase}}
    {{#onOverflowPhrase}}
        {{%onOverflowPhrase="onOverflowPhrase";""}}
        //TODO onOverflowPhrase
    {{/onOverflowPhrase}}
    {{#programValueStmt.literal}}
        {{>literal}}
        {{%callFileName = operand;""}}
    {{/programValueStmt.literal}}
    {{#programValueStmt.call}}
        {{>call[operand]}}
        {{%dynCall = operand;""}}
    {{/programValueStmt.call}}
    {{#onExceptionClause}}
        try{
    {{/onExceptionClause}}
    {{^$dynCall}}
        {{%calleeClass = cobol_precompile(callFileName);""}}
    {{/dynCall}}
    {{%parameters=null;""}}
    {{#usingPhrase.usingParameters}}
        {{>callSub.parameter(parameters)[parameters,param]}}
    {{/usingPhrase.usingParameters}}
    {{#$givingName}}
        {{%givingName}} =
    {{/givingName}}
        {{#$dynCall}}
            ServiceManager.getService({{%dynCall}}).procedure( {{%parameters == null ? "":parameters}});
        {{/dynCall}}
        {{^$dynCall}}
            ServiceManager.getService({{%calleeClass}}.class).
                procedure( {{%parameters == null ? "":parameters}});
        {{/dynCall}}
        //new {{%calleeClass}}().procedure({{%parameters == null ? "":parameters}});
    {{#notOnExceptionClause}}
        {{>statements}}
    {{/notOnExceptionClause}}
    {{#onExceptionClause}}
        }catch(Exception e){
            {{>statements}}
        }
    {{/onExceptionClause}}
{{/curObj}}{{/CALL}}